using VeterinaryClinic.Models;
using VeterinaryClinic.Repositories;
using VeterinaryClinic.Data;

namespace VeterinaryClinic.Services
{
    public static class ConsultationService
    {
        private static readonly ConsultationRepository _consultRepo = new();
        private static readonly VeterinarianRepository _vetRepo = new();

        public static async Task CreateConsultationAsync(Guid customerId)
        {
            Console.WriteLine("üí¨ Describe el problema de tu mascota:");
            string symptoms = Console.ReadLine() ?? "";

            Console.WriteLine($"\n[LOG] üßç‚Äç‚ôÇÔ∏è CustomerId recibido: {customerId}");
            Console.WriteLine("[LOG] üîÑ Obteniendo veterinarios desde Firebase...");

            // ‚úÖ 1Ô∏è‚É£ Obtener veterinarios directamente del repositorio (Firebase)
            var vets = await _vetRepo.ObtenerTodosAsync();

            Console.WriteLine($"[LOG] ‚úÖ Veterinarios obtenidos: {vets?.Count ?? 0}");

            if (vets == null || vets.Count == 0)
            {
                Console.WriteLine("‚ùå No hay veterinarios registrados actualmente.");
                Console.ReadKey();
                return;
            }

            // ‚úÖ 2Ô∏è‚É£ Usar el servicio Gemini para seleccionar un veterinario
            Console.WriteLine("[LOG] ü§ñ Enviando s√≠ntomas al servicio Gemini...");
            var result = await GeminiService.SelectVeterinarianAsync(symptoms, vets);

            if (result == null)
            {
                Console.WriteLine("[ERROR] ‚ùå GeminiService devolvi√≥ null.");
                Console.ReadKey();
                return;
            }

            Console.WriteLine($"\n[LOG] üéØ Veterinario seleccionado por Gemini:");
            Console.WriteLine($"[LOG]     ‚û§ SelectedVeterinarianId: {result.SelectedVeterinarianId}");
            Console.WriteLine($"[LOG]     ‚û§ Reason: {result.Reason}");

            // ‚úÖ 3Ô∏è‚É£ Crear la nueva consulta
            var consultation = new Consultation
            {
                Id = Guid.NewGuid(),
                CustomerId = customerId,
                VeterinarianId = result.SelectedVeterinarianId,
                Description = symptoms,
                Date = DateTime.Now
            };

            Console.WriteLine($"\n[LOG] üßæ Nueva consulta creada:");
            Console.WriteLine($"[LOG]     ‚û§ Consultation.Id: {consultation.Id}");
            Console.WriteLine($"[LOG]     ‚û§ Consultation.VeterinarianId: {consultation.VeterinarianId}");
            Console.WriteLine($"[LOG]     ‚û§ Consultation.CustomerId: {consultation.CustomerId}");

            // ‚úÖ 4Ô∏è‚É£ Guardar la consulta en Firebase
            Console.WriteLine("[LOG] üíæ Guardando consulta en Firebase...");
            await _consultRepo.CrearAsync(consultation);
            Console.WriteLine("[LOG] ‚úÖ Consulta guardada correctamente.");

            // ‚úÖ 5Ô∏è‚É£ Buscar el veterinario seleccionado
            var selectedVet = vets.Values.FirstOrDefault(v => v.Id == result.SelectedVeterinarianId);

            if (selectedVet == null)
            {
                Console.WriteLine("[ERROR] ‚ùå No se encontr√≥ el veterinario seleccionado en la lista.");
                Console.ReadKey();
                return;
            }

            Console.WriteLine($"\n[LOG] üë®‚Äç‚öïÔ∏è Veterinario encontrado:");
            Console.WriteLine($"[LOG]     ‚û§ Vet.Id: {selectedVet.Id}");
            Console.WriteLine($"[LOG]     ‚û§ Nombre: {selectedVet.Name}");
            Console.WriteLine($"[LOG]     ‚û§ Consultations antes: {selectedVet.ConsultationIds?.Count ?? 0}");

            // ‚úÖ 6Ô∏è‚É£ Actualizar la lista de consultas
            selectedVet.ConsultationIds ??= new List<Guid>();
            selectedVet.ConsultationIds.Add(consultation.Id);

            Console.WriteLine($"[LOG] ‚ûï Consulta agregada. Total ahora: {selectedVet.ConsultationIds.Count}");

            // ‚úÖ 7Ô∏è‚É£ Guardar veterinario actualizado en Firebase
            Console.WriteLine($"[LOG] üíæ Actualizando veterinario {selectedVet.Id} en Firebase...");
      await _vetRepo.ActualizarCampoAsync(selectedVet.Id.ToString(), "consultationIds", selectedVet.ConsultationIds);

            Console.WriteLine("[LOG] ‚úÖ Veterinario actualizado correctamente.");

            // ‚úÖ 8Ô∏è‚É£ Sincronizar DataStore
            DataStore.Veterinarians[selectedVet.Id.ToString()] = selectedVet;

            Console.WriteLine("\nüêæ Consulta registrada correctamente.");
            Console.WriteLine("\nPresiona cualquier tecla para volver al men√∫...");
            Console.ReadKey();
        }
    }
}
